using System;
using System.Collections.Generic;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using TaxJarTest.Models;
//
//    var taxCalculations = TaxCalculations.FromJson(jsonString);

namespace TaxJarTest.Models
{

    public partial class TaxCalculations
    {
        [JsonProperty("tax", NullValueHandling = NullValueHandling.Ignore)]
        public Tax Tax { get; set; }
    }

    public partial class Tax
    {
        [JsonProperty("amount_to_collect", NullValueHandling = NullValueHandling.Ignore)]
        public double? AmountToCollect { get; set; }

        [JsonProperty("breakdown", NullValueHandling = NullValueHandling.Ignore)]
        public Breakdown Breakdown { get; set; }

        [JsonProperty("freight_taxable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? FreightTaxable { get; set; }

        [JsonProperty("has_nexus", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasNexus { get; set; }

        [JsonProperty("jurisdictions", NullValueHandling = NullValueHandling.Ignore)]
        public Jurisdictions Jurisdictions { get; set; }

        [JsonProperty("order_total_amount", NullValueHandling = NullValueHandling.Ignore)]
        public double? OrderTotalAmount { get; set; }

        [JsonProperty("rate", NullValueHandling = NullValueHandling.Ignore)]
        public double? Rate { get; set; }

        [JsonProperty("shipping", NullValueHandling = NullValueHandling.Ignore)]
        public double? Shipping { get; set; }

        [JsonProperty("tax_source", NullValueHandling = NullValueHandling.Ignore)]
        public string TaxSource { get; set; }

        [JsonProperty("taxable_amount", NullValueHandling = NullValueHandling.Ignore)]
        public double? TaxableAmount { get; set; }
    }

    public partial class Breakdown
    {
        [JsonProperty("city_tax_collectable", NullValueHandling = NullValueHandling.Ignore)]
        public long? CityTaxCollectable { get; set; }

        [JsonProperty("city_tax_rate", NullValueHandling = NullValueHandling.Ignore)]
        public long? CityTaxRate { get; set; }

        [JsonProperty("city_taxable_amount", NullValueHandling = NullValueHandling.Ignore)]
        public long? CityTaxableAmount { get; set; }

        [JsonProperty("combined_tax_rate", NullValueHandling = NullValueHandling.Ignore)]
        public double? CombinedTaxRate { get; set; }

        [JsonProperty("county_tax_collectable", NullValueHandling = NullValueHandling.Ignore)]
        public long? CountyTaxCollectable { get; set; }

        [JsonProperty("county_tax_rate", NullValueHandling = NullValueHandling.Ignore)]
        public long? CountyTaxRate { get; set; }

        [JsonProperty("county_taxable_amount", NullValueHandling = NullValueHandling.Ignore)]
        public long? CountyTaxableAmount { get; set; }

        [JsonProperty("line_items", NullValueHandling = NullValueHandling.Ignore)]
        public List<Shipping> LineItems { get; set; }

        [JsonProperty("shipping", NullValueHandling = NullValueHandling.Ignore)]
        public Shipping Shipping { get; set; }

        [JsonProperty("special_district_tax_collectable", NullValueHandling = NullValueHandling.Ignore)]
        public long? SpecialDistrictTaxCollectable { get; set; }

        [JsonProperty("special_district_taxable_amount", NullValueHandling = NullValueHandling.Ignore)]
        public long? SpecialDistrictTaxableAmount { get; set; }

        [JsonProperty("special_tax_rate", NullValueHandling = NullValueHandling.Ignore)]
        public long? SpecialTaxRate { get; set; }

        [JsonProperty("state_tax_collectable", NullValueHandling = NullValueHandling.Ignore)]
        public double? StateTaxCollectable { get; set; }

        [JsonProperty("state_tax_rate", NullValueHandling = NullValueHandling.Ignore)]
        public double? StateTaxRate { get; set; }

        [JsonProperty("state_taxable_amount", NullValueHandling = NullValueHandling.Ignore)]
        public double? StateTaxableAmount { get; set; }

        [JsonProperty("tax_collectable", NullValueHandling = NullValueHandling.Ignore)]
        public double? TaxCollectable { get; set; }

        [JsonProperty("taxable_amount", NullValueHandling = NullValueHandling.Ignore)]
        public double? TaxableAmount { get; set; }
    }

    public partial class Shipping
    {
        [JsonProperty("city_amount", NullValueHandling = NullValueHandling.Ignore)]
        public long? CityAmount { get; set; }

        [JsonProperty("city_tax_rate", NullValueHandling = NullValueHandling.Ignore)]
        public long? CityTaxRate { get; set; }

        [JsonProperty("city_taxable_amount", NullValueHandling = NullValueHandling.Ignore)]
        public long? CityTaxableAmount { get; set; }

        [JsonProperty("combined_tax_rate", NullValueHandling = NullValueHandling.Ignore)]
        public double? CombinedTaxRate { get; set; }

        [JsonProperty("county_amount", NullValueHandling = NullValueHandling.Ignore)]
        public long? CountyAmount { get; set; }

        [JsonProperty("county_tax_rate", NullValueHandling = NullValueHandling.Ignore)]
        public long? CountyTaxRate { get; set; }

        [JsonProperty("county_taxable_amount", NullValueHandling = NullValueHandling.Ignore)]
        public long? CountyTaxableAmount { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Id { get; set; }

        [JsonProperty("special_district_amount", NullValueHandling = NullValueHandling.Ignore)]
        public long? SpecialDistrictAmount { get; set; }

        [JsonProperty("special_district_taxable_amount", NullValueHandling = NullValueHandling.Ignore)]
        public long? SpecialDistrictTaxableAmount { get; set; }

        [JsonProperty("special_tax_rate", NullValueHandling = NullValueHandling.Ignore)]
        public long? SpecialTaxRate { get; set; }

        [JsonProperty("state_amount", NullValueHandling = NullValueHandling.Ignore)]
        public double? StateAmount { get; set; }

        [JsonProperty("state_sales_tax_rate", NullValueHandling = NullValueHandling.Ignore)]
        public double? StateSalesTaxRate { get; set; }

        [JsonProperty("state_taxable_amount", NullValueHandling = NullValueHandling.Ignore)]
        public double? StateTaxableAmount { get; set; }

        [JsonProperty("tax_collectable", NullValueHandling = NullValueHandling.Ignore)]
        public double? TaxCollectable { get; set; }

        [JsonProperty("taxable_amount", NullValueHandling = NullValueHandling.Ignore)]
        public double? TaxableAmount { get; set; }

        [JsonProperty("special_taxable_amount", NullValueHandling = NullValueHandling.Ignore)]
        public long? SpecialTaxableAmount { get; set; }
    }

    public partial class Jurisdictions
    {
        [JsonProperty("city", NullValueHandling = NullValueHandling.Ignore)]
        public string City { get; set; }

        [JsonProperty("country", NullValueHandling = NullValueHandling.Ignore)]
        public string Country { get; set; }

        [JsonProperty("county", NullValueHandling = NullValueHandling.Ignore)]
        public string County { get; set; }

        [JsonProperty("state", NullValueHandling = NullValueHandling.Ignore)]
        public string State { get; set; }
    }

    public partial class TaxCalculations
    {
        public static TaxCalculations FromJson(string json) => JsonConvert.DeserializeObject<TaxCalculations>(json, TaxCalculationsConverter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this TaxCalculations self) => JsonConvert.SerializeObject(self, TaxCalculationsConverter.Settings);
    }

    internal static class TaxCalculationsConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
